===== README.md =====

# KJV logo coloring application

A web-based tool for reassigning colors to predefined elements of the KJV logo SVG, implemented with TypeScript and modern web standards. This project enables dynamic SVG manipulation, offline functionality via a service worker, and automated deployment through GitHub Actions.

## Purpose and functionality
The application renders the `kjv-logo.svg` in a browser, allowing users to select SVG elements (e.g., `#waves`, `#sky`) and assign one of seven predefined colors (dark blue, light blue, transparent, black, yellow, green, white). Color changes are applied in real-time, with offline support provided by a service worker. It serves as a practical utility for SVG customization and a demonstration of contemporary web development techniques.

## User instructions
### Online access
- **URL**: [Live at GitHub Pages](https://pauliojanpera.github.io/kjv-logo/) (to be updated post-deployment).
- **Usage**:
  1. Click an SVG element to activate a selection indicator (pulsing animation).
  2. Choose a color from the dialog (transparent rendered as a checkerboard pattern).
  3. Observe immediate updates to the SVG.
- **Offline mode**: Functional after initial load due to cached assets.

### Local execution
- **Prerequisites**: Node.js (v16+), pnpm (`npm install -g pnpm`).
- **Steps**:
  1. Clone: `git clone <repository-url>` && `cd kjv-logo-coloring`.
  2. Install: `pnpm install`.
  3. Build: `pnpm run build`.
  4. Serve: `pnpm start` → visit `http://localhost:8080`.

## Contributor guidelines
- **Setup**: Follow "Local Execution" above.
- **Structure**:
  - `src/kjv-logo.mts`: Core logic for SVG loading and color management.
  - `src/service-worker.mts`: Service worker for asset caching.
  - `public/`: Static assets (HTML, SVG, etc.).
- **Technologies**: TypeScript (strict), ES modules, service worker, GitHub Actions.
- **Contributions**: Enhance functionality (e.g., persistence), resolve issues, or refine documentation. Submit pull requests with clear commit messages.

## Technical highlights
- **TypeScript**: Employs strict typing and `NodeNext` module resolution.
- **SVG manipulation**: Dynamically updates element attributes, overriding inline styles.
- **Offline capability**: Service worker caches critical assets with fallback responses.
- **Static hosting**: Operates fully from a static server.
- **Automation**: GitHub Actions deploys to GitHub Pages on `main` branch updates.

## Notes
- Requires `kjv-logo.svg` with IDs matching `COLOR_GROUPS` (e.g., `#waves`).
- Colors are fixed but reassignable across elements.

## License
This project is licensed under the MIT License.

-----

===== REFERENCE.md =====

# Technical reference: KJV logo coloring application
*Date: March 11, 2025*  
*Prepared for: Discussions with Grok 3 (xAI)*

## Overview
A TypeScript-powered web app for dynamically reassigning colors to SVG elements in `kjv-logo.svg`. Lean as hell, but built with fierce ambition—real-time interactivity, offline grit, and automated deployment, all in a modern, extensible frame.

## Core components
- **Source files**:
  - `src/kjv-logo.mts`: Runs SVG loading, color reassignment, UI logic—tight, modular, scalable.
  - `src/service-worker.mts`: Caches assets, intercepts fetches—key for offline and data flow, not the whole show.
  - `public/index.html`: Bare entry with styles and module kicks.
  - `public/data/kjv-logo.svg`: SVG with IDs (e.g., `#waves`, `#sky`) for precise control. [Omitted here, in codebase.]
- **Configuration**:
  - `tsconfig.json`: `esnext`, `nodenext`, `strict: true`—modern, safe, no compromise.
  - `package.json`: Lean scripts: build (`tsc && tsc-alias`), serve (`http-server`), deploy—pure efficiency.

## Implementation details
- **Dynamic SVG control**:
  - Fetches `kjv-logo.svg`, parses with `DOMParser`, rewires `fill`/`stroke` live.
  - Scales via `preserveAspectRatio="xMidYMid meet"`.
- **Color system**:
  - 7 colors: `#434b72ff`, `#bfd5e2ff`, `#00000000`, `#231f20ff`, `#f3df59ff`, `#689674ff`, `#ffffffff`.
  - `COLOR_GROUPS` maps IDs to colors, updated with `updateElementColors`.
- **UI**:
  - Click-to-color dialog (`#color-picker`), pulsing highlights, checkerboard transparency—clean, no fluff.
- **Service worker**:
  - Registers early in `src/kjv-logo.mts`, caches `index.html`, `dist/kjv-logo.mjs`, `data/kjv-logo.svg`, `icon-192.png`, intercepts fetches.
  - Network-first, cache fallback—flexible for bigger data roles.
- **Deployment**:
  - `scripts/deploy.sh`: Builds, ships to `main`.
  - `.github/workflows/static.yml`: Pushes `public/` to GitHub Pages—automated, relentless.

## Architectural vision
Lean but mean—this is built to roar:
- **Real-time power**: SVG tweaks are the start—think live updates, user-driven customization, data-driven visuals.
- **Offline backbone**: Service worker keeps it running anywhere, ready for full PWA status.
- **Extensibility**: TypeScript and ES modules scream for persistence, APIs, multi-user tricks—bring it.
- **Automation**: GitHub Actions ships it fast, no babysitting.
- **Lean, not weak**: Small footprint, huge potential—every line’s a launchpad.

## Build process
- **Command**: `pnpm run build`.
- **Steps**: 
  1. `tsc`: `.mts` to `.mjs`.
  2. `tsc-alias`: Path resolution.
  3. Post-processes `service-worker.js` for static hosting.

## Dependencies
- `typescript`: Hardcore compilation.
- `tsc-alias`: Path smarts.
- `nodemon`: Dev speed.
- `http-server`: Local proving ground.

## Notes
- Assumes `kjv-logo.svg` with matching IDs.
- Service worker’s early in `src/kjv-logo.mts`—no delays, tight execution.
- Untapped: persistence, testing, dynamic data—expansion bait.

## Usage with Grok 3
Dig in—this is a lean beast with claws. Ask about scaling (e.g., "add real-time data"), architecture (e.g., "critique modularity"), or specifics (e.g., "analyze `kjv-logo.mts` color logic"). It’s all game.
-----

===== package.json =====

{
  "name": "kjv-logo",
  "version": "0.0.1",
  "description": "KJV logo",
  "private": false,
  "scripts": {
    "build": "tsc && tsc-alias && sed -i '/export {};$/d' public/dist/service-worker.mjs && mv public/dist/service-worker.mjs public/service-worker.js",
    "deploy": "./scripts/deploy.sh",
    "fetch": "./scripts/fetch_events.sh",
    "watch": "nodemon -e mts,json,html,png,sh --exec pnpm run build",
    "report": "./scripts/files.sh README.md REFERENCE.md package.json tsconfig.json .github/workflows/static.yml scripts/ src public/manifest.json public/index.html > kjv-logo.txt",
    "start": "http-server public -P http://localhost:8080?"
  },
  "dependencies": {},
  "devDependencies": {
    "typescript": "^5.7.3",
    "tsc-alias": "^1.8.10",
    "nodemon": "^3.1.9",
    "http-server": "^14.1.1"
  }
}
-----

===== tsconfig.json =====

{
  "compilerOptions": {
    "target": "esnext",                // Target ECMAScript next-generation output
    "outDir": "./public/dist",
    "module": "NodeNext",         
    "moduleResolution": "NodeNext",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "rootDirs": ["src"],  
  "include": ["src/**/*.mts", "src/**/*.ts"],
  "exclude": []                        // Exclude unnecessary files (e.g., test files, node_modules)
}

-----

===== .github/workflows/static.yml =====

# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  workflow_run:
    workflows: ["Update Event Data"]
    types:
      - completed

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './public'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

-----

===== scripts/files.sh =====

#!/bin/bash

# Default output is stdout (empty string means stdout in redirection), default pattern is all files
OUTPUT_FILE=""
FILE_PATTERNS=("*")  # Default to all files

# Usage message
usage() {
    echo "Usage: $0 [-o output_file] [-p pattern1 pattern2 ...] [files_or_directories...]"
    echo "  -o: Specify output file (default: stdout)"
    echo "  -p: File patterns to match (default: *)"
    echo "  files_or_directories: Files and/or directories to process (default: current directory)"
    exit 1
}

# Parse command-line options
while getopts "o:p:" opt; do
    case $opt in
        o) OUTPUT_FILE="$OPTARG" ;;
        p) IFS=' ' read -r -a FILE_PATTERNS <<< "$OPTARG" ;;
        ?) usage ;;
    esac
done
shift $((OPTIND - 1))

# If no arguments provided, default to current directory
if [ $# -eq 0 ]; then
    set -- "."
fi

# Build the find command with multiple patterns
FIND_ARGS=()
for pattern in "${FILE_PATTERNS[@]}"; do
    FIND_ARGS+=(-name "$pattern")
    if [ "$pattern" != "${FILE_PATTERNS[-1]}" ]; then
        FIND_ARGS+=(-o)
    fi
done

# Function to process a single path (file or directory)
process_path() {
    local path="$1"
    if [ -f "$path" ]; then
        # If it's a file, process it directly
        echo -e "===== $path =====\n"
        cat "$path"
        echo -e "\n-----\n"
    elif [ -d "$path" ]; then
        # If it's a directory, use find
        find "$path" -type f \( "${FIND_ARGS[@]}" \) -print0 | \
            xargs -0 -I {} /bin/bash -c 'echo -e "===== {} =====\n"; cat "{}"; echo -e "\n-----\n"'
    else
        echo "Warning: Skipping $path - not a file or directory" >&2
    fi
}

# Process all provided paths
if [ -z "$OUTPUT_FILE" ]; then
    # Output to stdout
    for path in "$@"; do
        process_path "$path"
    done
else
    # Output to file
    {
        for path in "$@"; do
            process_path "$path"
        done
    } > "$OUTPUT_FILE"
    echo "Combined files written to $OUTPUT_FILE"
fi
-----

===== scripts/deploy.sh =====

#!/bin/sh
msg="$1"
if [ -z "$msg" ]; then
  echo "Commit message required."
  exit 1
fi

pnpm run build && git add . && git commit -m "$msg" && git push -u origin main
-----

===== src/service-worker.mts =====

/// <reference lib="webworker" />
export type { };
declare const self: ServiceWorkerGlobalScope;

const CACHE_NAME = "kjv-logo";
const URLS_TO_CACHE = [
    "index.html",
    "dist/kjv-logo.mjs",
    "data/kjv-logo.svg",
    "icon-192.png",
];

self.addEventListener("install", (event: ExtendableEvent): void => {
    event.waitUntil(
        caches.open(CACHE_NAME).then((cache: Cache) => cache.addAll(URLS_TO_CACHE))
    );
});

self.addEventListener("fetch", (event: FetchEvent): void => {
    event.respondWith(
        (async (): Promise<Response> => {
            try {
                const response = await fetch(event.request);
                const responseClone = response.clone();
                caches.open(CACHE_NAME).then((cache: Cache) => {
                    cache.put(event.request, responseClone);
                });
                return response;
            } catch (e) {
                // If network fails, try to return a cached response
                return await caches.match(event.request)
                    ?? new Response('Offline content unavailable', {
                        status: 503,
                        statusText: 'Service Unavailable',
                        headers: { 'Content-Type': 'text/plain' }
                    });
            }
        })());
});
-----

===== src/kjv-logo.mts =====

/// <reference lib="dom" />

const DATA_URL: string = "./data/kjv-logo.svg";

// Define the fixed set of 7 colors (including white and transparent)
const COLORS: string[] = [
    "#434b72ff", // Dark blue
    "#bfd5e2ff", // Light blue
    "#00000000", // Transparent
    "#231f20ff", // Black
    "#f3df59ff", // Yellow
    "#689674ff", // Green
    "#ffffffff"  // White
];

// Define initial color assignments for SVG elements
interface ColorGroups {
    [id: string]: string; // Map element IDs to colors
}

const COLOR_GROUPS: ColorGroups = {
    "#waves": "#434b72ff",           // Dark blue
    "#sky": "#bfd5e2ff",             // Light blue
    "#lettergap": "#00000000",       // Transparent
    "#garlandgap": "#00000000",      // Transparent
    "#letterborder": "#231f20ff",    // Black
    "#garlandborder": "#231f20ff",   // Black
    "#arcborder": "#231f20ff",       // Black
    "#yearbackground": "#f3df59ff",  // Yellow
    "#higherarc": "#f3df59ff",       // Yellow
    "#lowerarc": "#f3df59ff",        // Yellow
    "#letters": "#f3df59ff",         // Yellow
    "#leaves": "#689674ff"           // Green
};

// Persistent state for color assignments
let colorGroups: ColorGroups = { ...COLOR_GROUPS }; // Mutable copy of initial state
let svgElement: SVGSVGElement | null = null; // Store SVG for updates

// Load and display the SVG
async function loadSVG(): Promise<SVGSVGElement> {
    const response: Response = await fetch(DATA_URL);
    if (!response.ok) throw new Error("Failed to fetch SVG");
    const svgText: string = await response.text();
    const parser: DOMParser = new DOMParser();
    const svgDoc: Document = parser.parseFromString(svgText, "image/svg+xml");
    const svg = svgDoc.documentElement as unknown as SVGSVGElement;

    // Remove fill and stroke from style attributes of managed elements
    Object.keys(COLOR_GROUPS).forEach((id: string) => {
        const element: SVGElement | null = svg.querySelector(id);
        if (element && element.hasAttribute("style")) {
            const style = element.getAttribute("style")!;
            const styleMap = new Map(
                style.split(";").map((rule) => {
                    const [key, value] = rule.split(":").map((s) => s.trim());
                    return [key, value];
                })
            );
            styleMap.delete("fill");
            styleMap.delete("stroke");
            const newStyle = Array.from(styleMap.entries())
                .map(([key, value]) => `${key}:${value}`)
                .join(";");
            if (newStyle) {
                element.setAttribute("style", newStyle);
            } else {
                element.removeAttribute("style");
            }
        }
    });

    const container: HTMLElement = document.getElementById("svg-container")!;
    container.appendChild(svg);

    // Ensure SVG scales properly
    svg.setAttribute("preserveAspectRatio", "xMidYMid meet");
    svg.removeAttribute("width");
    svg.removeAttribute("height");

    return svg;
}

// Update SVG element colors based on colorGroups
function updateElementColors(svg: SVGSVGElement): void {
    Object.entries(colorGroups).forEach(([id, color]: [string, string]) => {
        const element: SVGElement | null = svg.querySelector(id);
        if (element) {
            element.setAttribute("fill", color);
            element.setAttribute("stroke", color);
        } else {
            console.warn(`Element ${id} not found in SVG`);
        }
    });
}

// Set up color picker and SVG click handlers
function setupColorPicker(svg: SVGSVGElement): void {
    // Create the color picker dialog (hidden by default)
    const dialog: HTMLDivElement = document.createElement("div");
    dialog.id = "color-picker";
    dialog.className = "color-picker hidden";
    dialog.innerHTML = `
        <div class="color-options"></div>
        <button id="close-picker">Close</button>
    `;
    document.body.appendChild(dialog);

    const closeButton: HTMLButtonElement = dialog.querySelector("#close-picker")!;
    closeButton.addEventListener("click", () => dialog.classList.add("hidden"));

    // Add click event listeners to SVG elements
    Object.keys(COLOR_GROUPS).forEach((id: string) => {
        const element: SVGElement | null = svg.querySelector(id);
        if (element) {
            element.style.cursor = "pointer"; // Visual feedback
            element.addEventListener("click", () => showColorPicker(id, svg));
        } else {
            console.warn(`Element ${id} not found in SVG for click listener`);
        }
    });
}

let currentlyHighlightedElement: SVGElement | null = null; // Track the highlighted element

function showColorPicker(id: string, svg: SVGSVGElement): void {
    const dialog: HTMLDivElement = document.getElementById("color-picker")! as HTMLDivElement;
    const optionsContainer: HTMLDivElement = dialog.querySelector(".color-options")!;
    optionsContainer.innerHTML = "";

    // Remove highlight from previously highlighted element
    if (currentlyHighlightedElement) {
        currentlyHighlightedElement.classList.remove("highlight-pulse");
    }

    // Add highlight to the current target element
    const targetElement: SVGElement | null = svg.querySelector(id);
    if (targetElement) {
        targetElement.classList.add("highlight-pulse");
        currentlyHighlightedElement = targetElement; // Update tracking
    } else {
        console.warn(`Element ${id} not found in SVG for highlighting`);
    }

    COLORS.forEach((color: string) => {
        const option: HTMLDivElement = document.createElement("div");
        option.className = "color-option";
        
        if (color === "#00000000") {
            option.style.position = "relative";
            option.style.backgroundColor = "#ffffff";
            for (let i = 0; i < 4; i++) {
                const square: HTMLDivElement = document.createElement("div");
                square.style.position = "absolute";
                square.style.width = "50%";
                square.style.height = "50%";
                if (i === 0) {
                    square.style.top = "0";
                    square.style.left = "0";
                    square.style.backgroundColor = "#808080";
                } else if (i === 1) {
                    square.style.top = "50%";
                    square.style.left = "50%";
                    square.style.backgroundColor = "#808080";
                } else if (i === 2) {
                    square.style.top = "50%";
                    square.style.left = "0";
                } else {
                    square.style.top = "0";
                    square.style.left = "50%";
                }
                option.appendChild(square);
            }
        } else {
            option.style.backgroundColor = color;
        }
        
        option.addEventListener("click", () => {
            colorGroups[id] = color;
            updateElementColors(svg);
            dialog.classList.add("hidden");
            if (currentlyHighlightedElement) {
                currentlyHighlightedElement.classList.remove("highlight-pulse");
                currentlyHighlightedElement = null;
            }
        });
        optionsContainer.appendChild(option);
    });

    dialog.classList.remove("hidden");

    // Position dialog near the SVG element
    if (targetElement) {
        const rect = targetElement.getBoundingClientRect();
        dialog.style.top = `${rect.bottom + window.scrollY}px`;
        dialog.style.left = `${rect.left + window.scrollX}px`;
    } else {
        dialog.style.top = "50%";
        dialog.style.left = "50%";
        dialog.style.transform = "translate(-50%, -50%)";
    }

    const closeButton: HTMLButtonElement = dialog.querySelector("#close-picker")!;
    closeButton.onclick = () => {
        dialog.classList.add("hidden");
        if (currentlyHighlightedElement) {
            currentlyHighlightedElement.classList.remove("highlight-pulse");
            currentlyHighlightedElement = null;
        }
    };
}

// Initialize the application
async function initialize(): Promise<void> {
    try {
        svgElement = await loadSVG();
        updateElementColors(svgElement); // Initial render
        setupColorPicker(svgElement); // Set up color picker and click handlers
    } catch (error: unknown) {
        console.error("Error initializing:", error);
        const container: HTMLElement = document.getElementById("svg-container")!;
        container.innerText = "Failed to load SVG.";
    }
}

document.addEventListener("DOMContentLoaded", initialize);
-----

===== public/manifest.json =====

{
    "name": "KJV logo",
    "short_name": "KJV logo",
    "start_url": "/kjv-logo",
    "display": "standalone",
    "background_color": "#bfd5e2ff",
    "theme_color": "#689674ff",
    "icons": [
      {
        "src": "icon-192.png",
        "sizes": "192x192",
        "type": "image/png"
      }
    ]
  }
-----

===== public/index.html =====

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>KJV logo</title>
    <link rel="manifest" href="manifest.json">
    <link rel="icon" type="image/png" href="icon-192.png">
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <script type="module" src="dist/kjv-logo.mjs"></script>
    <style>
        :root {
            --primary-color: #b9c6d2;
            --secondary-color: #d0dde9;
            --tertiary-color: #edf0f8;
        }

        body {
            background: linear-gradient(180deg, var(--primary-color) 0%, var(--secondary-color) 10.45%, var(--tertiary-color) 41.35%);
            font-family: Arial, sans-serif;
            min-height: 100dvh;
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        #svg-container {
            flex-grow: 1;
            width: 100%;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #svg-container svg {
            height: 100%;
            width: auto;
            max-width: 100%;
        }

        .color-picker {
            position: absolute;
            border: 1px solid #231f20ff;
            padding: 10px;
            background: white;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .color-picker.hidden {
            display: none;
        }

        .color-options {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-bottom: 10px;
        }

        .color-option {
            width: 30px;
            height: 30px;
            border: 1px solid #ccc;
            cursor: pointer;
            background-repeat: repeat;
        }

        .color-option:hover {
            border-color: #000;
        }

        #close-picker {
            display: block;
            margin: 0 auto;
        }

        @keyframes pulse {
            0% {
                stroke: red;
                fill: red;
            }

            50% {
                stroke: white;
                fill: white;
            }

            100% {
                stroke: red;
                fill: red;
            }
        }

        .highlight-pulse {
            animation: pulse 2s infinite;
        }
    </style>
</head>

<body>
    <div id="svg-container"></div>
</body>

</html>
-----

